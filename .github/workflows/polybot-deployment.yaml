name: Polybot and YOLOv5 Microservice Deployment

on:
  push:
    paths:
      - 'polybot/**'
      - 'yolo5/**'
    branches:
      - main


env:
  EC2_PUBLIC_IP_POLYBOT1: 3.136.20.50
  EC2_PUBLIC_IP_POLYBOT2: 3.138.153.210

jobs:
  BuildPolybot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push Polybot image to DockerHub
        run: |
          cd polybot
          docker login -u ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }} -p ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}
          IMAGE_NAME=${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/my_polybot:v2
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY1 }}" > private_key.pem
          chmod 600 private_key.pem

  DeployPolybot: # step 2
    name: Deploy to Polybot EC2 Instance
    runs-on: ubuntu-latest
    needs:
      - BuildPolybot
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to AWS EC2
      run: |
        IMAGE_NAME=${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/my_polybot:v2
        
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY1 }}" > private_key.pem
        chmod 400 private_key.pem
        POLYBOT_INSTANCES=$(aws elbv2 describe-target-health --target-group-arn ${{ secrets.POLYBOT_TARGET_GROUP_ARN }} --query 'TargetHealthDescriptions[*].Target.Id' --output text --region ${{ secrets.AWS_REGION }})
        echo "POLYBOT_INSTANCES: $POLYBOT_INSTANCES"
        
        for instance in $POLYBOT_INSTANCES; do
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $instance --query 'Reservations[0].Instances[0].State.Name' --output text --region ${{ secrets.AWS_REGION }})
        
        
          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "Instance $instance is $INSTANCE_STATE. Starting the instance..."
            aws ec2 start-instances --instance-ids $instance --region ${{ secrets.AWS_REGION }}
        
            echo "Waiting for instance $instance to be in running state..."
            aws ec2 wait instance-running --instance-ids $instance --region ${{ secrets.AWS_REGION }}
          fi
        
          INSTANCE_INFO=$(aws ec2 describe-instances --instance-ids $instance --query 'Reservations[0].Instances[0]' --output json --region ${{ secrets.AWS_REGION }})
          echo "Instance Info: $INSTANCE_INFO"
          PUBLIC_IP=$(echo $INSTANCE_INFO | jq -r '.PublicIpAddress')
        
          if [ "$PUBLIC_IP" == "null" ] || [ -z "$PUBLIC_IP" ]; then
            echo "No public IP found for instance $instance"
            continue
          fi
          echo "Instance ID: $instance, Public IP: $PUBLIC_IP"
          # Retry SSH connection up to 5 times with a delay
          for attempt in {1..5}; do
            echo "Attempt $attempt to connect to $PUBLIC_IP"
            if ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$PUBLIC_IP "echo 'SSH connection successful'"; then
              echo "SSH connection successful to $PUBLIC_IP"
              ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$PUBLIC_IP "sudo docker stop my_polybot"
              ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$PUBLIC_IP "sudo docker rm my_polybot"
        
              ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$PUBLIC_IP " sudo docker pull ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/IMAGE_NAME"
              ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$PUBLIC_IP "sudo docker run -d --restart always --name my_polybot -p 8443:8443 ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/IMAGE_NAME"
              break
            else
              echo "SSH connection to $PUBLIC_IP failed. Retrying in 10 seconds..."
              sleep 10
            fi
          done
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}





#      - name: Copy Compose files to the Polybot EC2 Instance 1
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ env.EC2_PUBLIC_IP }}
#          username: ubuntu
#          key: ${{ secrets.EC2_SSH_PRIVATE_KEY1 }}
#          source: docker-compose.yaml
#          target: PolybotService/
#      - name: Update the Docker Compose project in the Polybot EC2 Instance 1 #ADDED
#        uses: appleboy/ssh-action@master
#        with:
#          host: env.EC2_PUBLIC_IP_POLYBOT1
#          username: ubuntu
#          key: ${{ secrets.EC2_SSH_PRIVATE_KEY1 }}
#          script: |
#
#            sudo apt update && sudo apt install jq -y
#
#            cd polybot/
#
#            # Generate .env file
#            echo """
#            POLYBOT_IMG_NAME=shantalberkhof/polybot:${{ github.run_number }}
#            YOLO5_IMG_NAME=shantalberkhof/yolo5:${{ github.run_number }}
#            TELEGRAM_APP_URL=https://outgoing-amusing-ram.ngrok-free.app
#            TELEGRAM_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
#            """ > .env
#
#            # Take the service down
#            docker compose down
#
#            # Take it up with the current updated values
#            docker compose up -d


#        run: |
#          echo "Deploying to Polybot instance 1..."
#          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_PRIVATE_KEY1 }} ubuntu@${{ env.EC2_PUBLIC_IP_POLYBOT1 }} << EOF
#            docker pull shantalberkhof/my_polybot:v2
#            docker stop my_polybot || true
#            docker rm my_polybot || true
#            docker run -d -p 8443:8443 --name my_polybot shantalberkhof/my_polybot:v2
#          EOF
#
#      - name: Deploy to Polybot EC2 Instance 2
#        run: |
#          echo "Deploying to Polybot instance 2..."
#          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_PRIVATE_KEY2 }} ubuntu@${{ env.EC2_PUBLIC_IP_POLYBOT2 }} << EOF
#            docker pull shantalberkhof/my_polybot:v2
#            docker stop my_polybot || true
#            docker rm my_polybot || true
#            docker run -d -p 8443:8443 --name my_polybot shantalberkhof/my_polybot:v2
#          EOF

#      - name: Deploy to YOLO5 EC2 Instances
#        run: |
#          echo "Deploying to YOLO5 instances..."
#          for IP in ${{ env.EC2_PUBLIC_IP_YOLO5 }}; do
#            ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_PRIVATE_KEY1 }} ubuntu@$IP << EOF
#              docker pull shantalberkhof/my_yolo5:v2
#              docker stop my_yolo5 || true
#              docker rm my_yolo5 || true
#              docker run -d --name my_yolo5 -e BUCKET_NAME=${{ env.BUCKET_NAME }} -e SQS_QUEUE_NAME=${{ env.SQS_QUEUE_NAME }} shantalberkhof/my_yolo5:v2
#            EOF
#          done
#
#          # ????
#          # Take the service down
#          docker compose down
#
#          # Take it up with the current updated values
#          docker compose up -d


#  Deploy:
#    runs-on: ubuntu-latest
#    needs: Build
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Fetch EC2 instance IP addresses
#        id: fetch-ips
#        run: |
#          PUBLIC_IPS=$(aws ec2 describe-instances \
#            --region ${{ secrets.AWS_REGION }} \
#            --filters "Name=tag:Name,Values=polybot" \
#            --query 'Reservations[].Instances[].PublicIpAddress' \
#            --output text)
#          echo "PUBLIC_IPS=$PUBLIC_IPS" >> $GITHUB_ENV
#
#      - name: Deploy to EC2 instances
#        run: |
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
#          chmod 400 ssh_key.pem
#          for IP in ${{ env.PUBLIC_IPS }}; do
#            ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$IP << EOF
#              docker pull ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/polybot:latest
#              docker stop polybot || true
#              docker rm polybot || true
#              docker run -d -p 8080:80 --name polybot ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/polybot:latest
#            EOF
#          done
#        env:
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#



# ------------------------------------------------------------

# Original code:

#name: Polybot Microservice Deployment
#
#on:
#  push:
#    paths:
#      - 'polybot/**'
#    branches:
#      - main
#
#jobs:
#  Build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the repo code
#        uses: actions/checkout@v2
#
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}
#          password: ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}
#
#      - name: Build and push image
#        run: |
#          cd INTPolybotServiceAWS/polybot
#          docker build -t shantalberkhof/my_polybot:v2 .
#          docker push shantalberkhof/my_polybot:v2
#          # TODO your implementation here....   aws cli -> retrite public ip by tag
#
#  Deploy:
#    runs-on: ubuntu-latest
#    needs:
#      - Build
#
#    steps:
#      - name: Checkout the repo code
#        uses: actions/checkout@v2
#      - name: Deploy new version
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY_PATH }} ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
#          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my_polybot:latest
#          docker stop my_polybot || true
#          docker rm my_polybot || true
#          docker run -d -p 8080:80 --name my_polybot ${{ secrets.DOCKER_HUB_USERNAME }}/my_polybot:latest
#         EOF
#          # TODO your implementation here....

