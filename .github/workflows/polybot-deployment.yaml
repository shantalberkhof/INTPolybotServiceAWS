name: Polybot and YOLOv5 Microservice Deployment

on:
  push:
    paths:
      - 'polybot/**'
      - 'yolo5/**'
    branches:
      - main

env:
  TAG_KEY: Name
  TAG_VALUE: shantal-aws-yolo1
  BUCKET_NAME: shantal-awsproject
  SQS_QUEUE_NAME: shantal-queue-aws
  EC2_PUBLIC_IP_POLYBOT1: 3.12.36.67
  EC2_PUBLIC_IP_POLYBOT2: 18.218.202.104

jobs:
  FetchIPs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Fetch YOLO5 EC2 Public IPs
        run: |
          echo "Fetching instance IDs based on tag..."
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:${TAG_KEY},Values=${TAG_VALUE}" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)

          echo "Fetching public IPs for YOLO5 instances..."
          EC2_PUBLIC_IP_YOLO5=""
          for id in $INSTANCE_IDS; do
            PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $id \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            EC2_PUBLIC_IP_YOLO5+="$PUBLIC_IP "
          done

          echo "EC2_PUBLIC_IP_YOLO5=$EC2_PUBLIC_IP_YOLO5" >> $GITHUB_ENV
          echo "Public IPs: $EC2_PUBLIC_IP_YOLO5"

  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push YOLO5 image
        run: |
          cd yolo5
          docker login -u ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }} -p ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}
          IMAGE_NAME=shantalberkhof/my_yolo5:v2
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Build and push Polybot image
        run: |
          cd polybot
          docker login -u ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }} -p ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}
          IMAGE_NAME=shantalberkhof/my_polybot:v2
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

  Deploy:
    name: Deploy to Polybot and YOLOv5 EC2 Instances
    runs-on: ubuntu-latest
    needs:
      - FetchIPs
      - Build
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Deploy to Polybot EC2 Instance 1
        run: |
          echo "Deploying to Polybot instance 1..."
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_PRIVATE_KEY1 }} ubuntu@${{ env.EC2_PUBLIC_IP_POLYBOT1 }} << EOF
            docker pull shantalberkhof/my_polybot:v2
            docker stop my_polybot || true
            docker rm my_polybot || true
            docker run -d -p 8443:8443 --name my_polybot shantalberkhof/my_polybot:v2
          EOF

      - name: Deploy to Polybot EC2 Instance 2
        run: |
          echo "Deploying to Polybot instance 2..."
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_PRIVATE_KEY2 }} ubuntu@${{ env.EC2_PUBLIC_IP_POLYBOT2 }} << EOF
            docker pull shantalberkhof/my_polybot:v2
            docker stop my_polybot || true
            docker rm my_polybot || true
            docker run -d -p 8443:8443 --name my_polybot shantalberkhof/my_polybot:v2
          EOF

      - name: Deploy to YOLO5 EC2 Instances
        run: |
          echo "Deploying to YOLO5 instances..."
          for IP in ${{ env.EC2_PUBLIC_IP_YOLO5 }}; do
            ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_PRIVATE_KEY1 }} ubuntu@$IP << EOF
              docker pull shantalberkhof/my_yolo5:v2
              docker stop my_yolo5 || true
              docker rm my_yolo5 || true
              docker run -d --name my_yolo5 -e BUCKET_NAME=${{ env.BUCKET_NAME }} -e SQS_QUEUE_NAME=${{ env.SQS_QUEUE_NAME }} shantalberkhof/my_yolo5:v2
            EOF
          done

#  Deploy:
#    runs-on: ubuntu-latest
#    needs: Build
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Fetch EC2 instance IP addresses
#        id: fetch-ips
#        run: |
#          PUBLIC_IPS=$(aws ec2 describe-instances \
#            --region ${{ secrets.AWS_REGION }} \
#            --filters "Name=tag:Name,Values=polybot" \
#            --query 'Reservations[].Instances[].PublicIpAddress' \
#            --output text)
#          echo "PUBLIC_IPS=$PUBLIC_IPS" >> $GITHUB_ENV
#
#      - name: Deploy to EC2 instances
#        run: |
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key.pem
#          chmod 400 ssh_key.pem
#          for IP in ${{ env.PUBLIC_IPS }}; do
#            ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$IP << EOF
#              docker pull ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/polybot:latest
#              docker stop polybot || true
#              docker rm polybot || true
#              docker run -d -p 8080:80 --name polybot ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/polybot:latest
#            EOF
#          done
#        env:
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#



# ------------------------------------------------------------
# Advanced code:

#
#name: Polybot Microservice Deployment
#
#on:
#  push:
#    paths:
#      - 'polybot/**'
#    branches:
#      - main
#
#jobs:
#  Build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the repo code
#        uses: actions/checkout@v2
#
#      - name: Build and push image
#        run: |
#          cd polybot
#
#          # Login to DockerHub
#          docker login -u ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }} -p ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}
#
#          # Build and push Docker image
#          # POLYBOT_IMAGE_NAME=${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/polybot:0.0.${{ github.run_number }}
#          POLYBOT_IMAGE_NAME=shantalberkhof/my_polybot:v2
#          docker build -t $POLYBOT_IMAGE_NAME .
#          docker push $POLYBOT_IMAGE_NAME
#
#  Deploy:
#    runs-on: ubuntu-latest
#    needs: Build
#
#    steps:
#      - name: Checkout the repo code
#        uses: actions/checkout@v2
#
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-2
#
#      - name: Fetch EC2 Instance Details
#        id: fetch-details
#        run: |
#          EC2_INSTANCE_DETAILS=$(aws ec2 describe-instances --region eu-west-2 --filters "Name=tag:Name,Values=polybot" "Name=tag:Name,Values=yaelwil" --query 'Reservations[].Instances[].[InstanceId,State.Name,PublicIpAddress]' --output json)
#          echo "$EC2_INSTANCE_DETAILS" > instance_details.json
#
#          EC2_INSTANCE_IDS=$(echo "$EC2_INSTANCE_DETAILS" | jq -r '.[][] | select(.[1] == "stopped") | .[0]' | tr '\n' ' ')
#          EC2_POLYBOT_IP_ADDRESSES=$(echo "$EC2_INSTANCE_DETAILS" | jq -r '.[][] | select(.[1] == "running") | .[2]' | tr '\n' ' ')
#          echo "EC2_INSTANCE_IDS=$EC2_INSTANCE_IDS" >> $GITHUB_ENV
#          echo "EC2_POLYBOT_IP_ADDRESSES=$EC2_POLYBOT_IP_ADDRESSES" >> $GITHUB_ENV
#
#      - name: Start Stopped Instances
#        if: env.EC2_INSTANCE_IDS != ''
#        run: |
#          for INSTANCE_ID in ${{ env.EC2_INSTANCE_IDS }}; do
#            echo "Starting instance $INSTANCE_ID"
#            aws ec2 start-instances --instance-ids $INSTANCE_ID --region eu-west-2
#          done
#
#      - name: Wait for Instances to be Running
#        if: env.EC2_INSTANCE_IDS != ''
#        run: |
#          for INSTANCE_ID in ${{ env.EC2_INSTANCE_IDS }}; do
#            echo "Waiting for instance $INSTANCE_ID to be running"
#            aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region eu-west-2
#          done
#
#      - name: Fetch EC2 Instance IP Addresses Again
#        if: env.EC2_INSTANCE_IDS != ''
#        run: |
#          NEW_RUNNING_INSTANCE_IPS=$(aws ec2 describe-instances --region eu-west-2 --instance-ids ${{ env.EC2_INSTANCE_IDS }} --query 'Reservations[].Instances[].PublicIpAddress' --output text | grep -v 'None' | tr '\n' ' ')
#          echo "NEW_RUNNING_INSTANCE_IPS=$NEW_RUNNING_INSTANCE_IPS" >> $GITHUB_ENV
#          # Ensure proper formatting of IP addresses
#          EC2_POLYBOT_IP_ADDRESSES="$EC2_POLYBOT_IP_ADDRESSES $NEW_RUNNING_INSTANCE_IPS"
#          EC2_POLYBOT_IP_ADDRESSES=$(echo $EC2_POLYBOT_IP_ADDRESSES | xargs)
#          echo "EC2_POLYBOT_IP_ADDRESSES=$EC2_POLYBOT_IP_ADDRESSES" >> $GITHUB_ENV
#
#      - name: Generate .env file
#        run: |
#          echo "BUCKET_NAME=
#          TELEGRAM_APP_URL=
#          REGION=eu-west-2
#          DYNAMODB_TABLE_NAME=
#          YOLO_QUEUE_NAME
#          FILTERS_QUEUE_NAME=
#          ALB_URL= "> .env
#
#      - name: Create SSH key file + Copy ENV file to EC2 instances
#        run: |
#          POLYBOT_IMAGE_NAME=${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/polybot:0.0.${{ github.run_number }}
#          echo "${{ secrets.PRIVATE_KEY }}" >> ssh_key.pem
#          sudo chmod 400 ssh_key.pem
#          # Split IP addresses into an array
#          IFS=' ' read -r -a IPS <<< "$EC2_POLYBOT_IP_ADDRESSES"
#          for IP in "${IPS[@]}"; do
#            echo "Deploying to $IP"
#            ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$IP << EOF
#              docker pull $POLYBOT_IMAGE_NAME || { echo "Failed to pull image on $IP"; exit 1; }
#              sudo docker stop polybot || true
#              sudo docker rm polybot || true
#              sudo docker run -d -p 8443:8443 -v /var/run/docker.sock:/var/run/docker.sock --restart=always --name polybot --env-file /home/ubuntu/.env $POLYBOT_IMAGE_NAME || { echo "Failed to run container on $IP"; exit 1; }
#          EOF
#          done
#        env:
#          AWS_DEFAULT_REGION: eu-west-2
#          AWS_REGION: eu-west-2
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          EC2_INSTANCE_IDS: ${{ env.EC2_INSTANCE_IDS }}
#          EC2_POLYBOT_IP_ADDRESSES: ${{ env.EC2_POLYBOT_IP_ADDRESSES }}
#          NEW_RUNNING_INSTANCE_IPS: ${{ env.NEW_RUNNING_INSTANCE_IPS }}
#          KEY: ${{ secrets.SSH_PRIVATE_KEY }}


# ------------------------------------------------------------
# Original code:

#name: Polybot Microservice Deployment
#
#on:
#  push:
#    paths:
#      - 'polybot/**'
#    branches:
#      - main
#
#jobs:
#  Build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the repo code
#        uses: actions/checkout@v2
#
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}
#          password: ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}
#
#      - name: Build and push image
#        run: |
#          cd INTPolybotServiceAWS/polybot
#          docker build -t shantalberkhof/my_polybot:v2 .
#          docker push shantalberkhof/my_polybot:v2
#          # TODO your implementation here....   aws cli -> retrite public ip by tag
#
#  Deploy:
#    runs-on: ubuntu-latest
#    needs:
#      - Build
#
#    steps:
#      - name: Checkout the repo code
#        uses: actions/checkout@v2
#      - name: Deploy new version
#        run: |
#          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY_PATH }} ubuntu@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
#          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my_polybot:latest
#          docker stop my_polybot || true
#          docker rm my_polybot || true
#          docker run -d -p 8080:80 --name my_polybot ${{ secrets.DOCKER_HUB_USERNAME }}/my_polybot:latest
#         EOF
#          # TODO your implementation here....

