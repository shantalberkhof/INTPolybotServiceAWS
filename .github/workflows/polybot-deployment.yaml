name: Polybot and YOLOv5 Microservice Deployment

on:
  push:
    paths:
      - 'polybot/**'
      - 'yolo5/**'
    branches:
      - main


env:
  EC2_PUBLIC_IP_POLYBOT1: 3.145.100.236
  EC2_PUBLIC_IP_POLYBOT2: 18.222.135.96

jobs:
  BuildPolybot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push Polybot image to DockerHub
        run: |
          cd polybot
          docker login -u ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }} -p ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}
          IMAGE_NAME=${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/my_polybot:v2
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY1 }}" > private_key1.pem
          chmod 600 private_key1.pem          
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY2 }}" > private_key2.pem
          chmod 600 private_key2.pem
      

  DeployPolybot: # step 2
    name: Deploy to Polybot EC2 Instance
    runs-on: ubuntu-latest
    needs:
      - BuildPolybot
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to AWS EC2
      run: |
        IMAGE_NAME=${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/my_polybot:v2
        
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY1 }}" > private_key1.pem
        chmod 400 private_key1.pem          
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY2 }}" > private_key2.pem
        chmod 400 private_key2.pem
        
        POLYBOT_INSTANCES=$(aws elbv2 describe-target-health --target-group-arn ${{ secrets.POLYBOT_TARGET_GROUP_ARN }} --query 'TargetHealthDescriptions[*].Target.Id' --output text --region ${{ secrets.AWS_REGION }})
        echo "POLYBOT_INSTANCES: $POLYBOT_INSTANCES"
        
        for instance in $POLYBOT_INSTANCES; do
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $instance --query 'Reservations[0].Instances[0].State.Name' --output text --region ${{ secrets.AWS_REGION }})
        
        
          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "Instance $instance is $INSTANCE_STATE. Starting the instance..."
            aws ec2 start-instances --instance-ids $instance --region ${{ secrets.AWS_REGION }}
        
            echo "Waiting for instance $instance to be in running state..."
            aws ec2 wait instance-running --instance-ids $instance --region ${{ secrets.AWS_REGION }}
          fi
        
          INSTANCE_INFO=$(aws ec2 describe-instances --instance-ids $instance --query 'Reservations[0].Instances[0]' --output json --region ${{ secrets.AWS_REGION }})
          echo "Instance Info: $INSTANCE_INFO"
          PUBLIC_IP=$(echo $INSTANCE_INFO | jq -r '.PublicIpAddress')
        
          if [ "$PUBLIC_IP" == "null" ] || [ -z "$PUBLIC_IP" ]; then
            echo "No public IP found for instance $instance"
            continue
          fi
         
          CurKey=private_key1.pem
        
          if [ "$PUBLIC_IP" == "18.222.135.96" ]; then
            CurKey=private_key2.pem
          fi
        
          echo "Instance ID: $instance, Public IP: $PUBLIC_IP, CurKey: $CurKey"              
          
          # Retry SSH connection up to 5 times with a delay
          for attempt in {1..5}; do
            echo "Attempt $attempt to connect to $PUBLIC_IP"
            if ssh -o StrictHostKeyChecking=no -i $CurKey ubuntu@$PUBLIC_IP "echo 'SSH connection successful'"; then
              echo "SSH connection successful to $PUBLIC_IP"
              ssh -o StrictHostKeyChecking=no -i $CurKey ubuntu@$PUBLIC_IP "sudo docker stop my_polybot"
              ssh -o StrictHostKeyChecking=no -i $CurKey ubuntu@$PUBLIC_IP "sudo docker rm my_polybot"
              if [[ $(sudo docker ps -aq -f name=my_polybot) ]]; then
                ssh -o StrictHostKeyChecking=no -i $CurKey ubuntu@$PUBLIC_IP "sudo docker stop my_polybot"
                ssh -o StrictHostKeyChecking=no -i $CurKey ubuntu@$PUBLIC_IP "sudo docker rm my_polybot"
              fi
        
              ssh -o StrictHostKeyChecking=no -i $CurKey ubuntu@$PUBLIC_IP "sudo docker pull $IMAGE_NAME"
              ssh -o StrictHostKeyChecking=no -i $CurKey ubuntu@$PUBLIC_IP "sudo docker run -d --restart always --name my_polybot -p 8443:8443 $IMAGE_NAME"
              break
            else
              echo "SSH connection to $PUBLIC_IP failed. Retrying in 10 seconds..."
              sleep 10
            fi
          done
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}


