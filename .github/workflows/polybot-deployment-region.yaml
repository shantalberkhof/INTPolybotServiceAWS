# Commit and push this and: region-us-east-1.tfvars OR region-eu-central-1.tfvars

name: Infra Terraform Polybot

on:
  workflow_dispatch: # to run manually from GitHub
    inputs:
      us-east-1:
        description: 'N.Virginia (us-east-1)'
        required: false
        type: boolean
      eu-central-1:
        description: 'Stockholm (eu-central-1)'
        required: false
        type: boolean

jobs:
  deploy-us-east-1:
    if: ${{ github.event.inputs['us-east-1'] == 'true' }}
    name: Deploy to us-east-1 (N. Virginia)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build and push Polybot image to DockerHub
        run: |
          cd polybot
          docker login -u ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }} -p ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}
          IMAGE_NAME=${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/my_polybot:v2
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Get Polybot EC2's IP
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          INSTANCES_IDS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=shantalberkhof-polybot-ec2" \
            --query 'Reservations[*].Instances[*].InstanceId' --output text)
          
          for instance_id in $INSTANCES_IDS; do
            state=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[*].Instances[*].State.Name' --output text)
            if [ "$state" = "stopped" ]; then
              aws ec2 start-instances --instance-ids $instance_id
              aws ec2 wait instance-running --instance-ids $instance_id
            fi
          done
          
          POLYBOT_SERVERS_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=shantalberkhof-polybot-ec2" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
#          echo "POLYBOT_SERVERS_IP<<EOF" >> "$GITHUB_ENV"
#          echo "$POLYBOT_SERVERS_IP" >> "$GITHUB_ENV"
          echo "$POLYBOT_SERVERS_IP=$POLYBOT_SERVERS_IP" >> "$GITHUB_ENV" # NEW CORRECTION
          #echo "EOF" >> "$GITHUB_ENV"

      - name: Deploy new version
        env:
          PRIVATE_KEY: ${{ secrets.US_EAST_1_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          for SERVER_IP in $(echo $POLYBOT_SERVERS_IP); do
            scp -i private_key .env ubuntu@$SERVER_IP:/home/ubuntu/
            ssh -i private_key ubuntu@$SERVER_IP <<EOF
              docker stop my_polybot || true
              docker rm my_polybot || true
              docker run -d -p 8443:8443 --restart always --env-file .env --name my_polybot shantalberkhof/my_polybot:v2
          EOF
          done

  deploy-eu-central-1:
    if: ${{ github.event.inputs['eu-central-1'] == 'true' }}
    name: Deploy to eu-central-1 (Stockholm)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Build and push Polybot image to DockerHub
        run: |
          cd polybot
          docker login -u ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }} -p ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}
          IMAGE_NAME=${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/my_polybot:v2
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Get Polybot EC2's IP
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          INSTANCES_IDS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=shantalberkhof-polybot-ec2" \
            --query 'Reservations[*].Instances[*].InstanceId' --output text)
          
          for instance_id in $INSTANCES_IDS; do
            state=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[*].Instances[*].State.Name' --output text)
            if [ "$state" = "stopped" ]; then
              aws ec2 start-instances --instance-ids $instance_id
              aws ec2 wait instance-running --instance-ids $instance_id
            fi
          done
          
          POLYBOT_SERVERS_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=shantalberkhof-polybot-ec2" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          echo "POLYBOT_SERVERS_IP<<EOF" >> "$GITHUB_ENV"
          echo "$POLYBOT_SERVERS_IP" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"

      - name: Deploy new version
        env:
          PRIVATE_KEY: ${{ secrets.EU_CENTRAL_1_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          for SERVER_IP in $(echo $POLYBOT_SERVERS_IP); do
            scp -i private_key .env ubuntu@$SERVER_IP:/home/ubuntu/
            ssh -i private_key ubuntu@$SERVER_IP <<EOF
              docker stop my_polybot || true
              docker rm my_polybot || true
              docker run -d -p 8443:8443 --restart always --env-file .env --name my_polybot shantalberkhof/my_polybot:v2
          EOF
          done

