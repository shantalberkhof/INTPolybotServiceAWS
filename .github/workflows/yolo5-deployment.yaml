name: Yolo5 Microservice Deployment

on:
  push:
    paths:
      - 'yolo5/**'
    branches:
      - main

env:
  TAG_KEY: Name
  TAG_VALUE: shantal-aws-yolo1
  BUCKET_NAME: shantal-awsproject
  SQS_QUEUE_NAME: shantal-queue-aws


jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}


    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}
        password: ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}

    - name: Build and push Docker image
      run: |
        cd yolo5
        YOLO5_IMAGE_NAME=${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/my_yolo5:v2
        docker build -t $YOLO5_IMAGE_NAME .
        # docker tag $YOLO5_IMAGE_NAME ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/$YOLO5_IMAGE_NAME
        docker push $YOLO5_IMAGE_NAME


    - name: Get Instance ID from Specific Auto Scaling Group
      run: |
        # Specify the name of your desired Auto Scaling Group
        ASG_NAME="shantal-asg-aws"
        
        # Retrieve the instance ID of the first instance in that specific ASG
        INSTANCE_ID=$(aws autoscaling describe-auto-scaling-instances --query "AutoScalingInstances[?AutoScalingGroupName=='$ASG_NAME'].InstanceId | [0]" --output text)
        echo "Selected Auto Scaling Group Name: $ASG_NAME"
        echo "Selected Instance ID: $INSTANCE_ID"
        
        # Output the instance ID to the GitHub Actions environment
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
      shell: bash

    - name: Deploy to AWS EC2
      run: |
        EC2_PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
        echo "Selected Instance IP: EC2_PUBLIC_IP"
        YOLO5_IMAGE_NAME=${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/my_yolo5:v2
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY1 }}" > private_key.pem
        chmod 400 private_key.pem
        # Retry SSH connection up to 5 times with a delay
        for attempt in {1..5}; do
          echo "Attempt $attempt to connect to $EC2_PUBLIC_IP "

          if ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP "echo 'SSH connection successful'"; then
            echo "SSH connection successful to $EC2_PUBLIC_IP"
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP "sudo docker stop my_yolo5 || true"
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP "sudo docker rm my_yolo5 || true"
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP "sudo docker rmi ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/my_yolo5  || true"
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP "sudo docker system prune --force || true"
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP "sudo docker pull $YOLO5_IMAGE_NAME"
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP "sudo docker run -d --name my_yolo5 ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/$YOLO5_IMAGE_NAME"
            break
          else
            echo "SSH connection to ubuntu@$EC2_PUBLIC_IP failed. Retrying in 10 seconds..."
            sleep 10
          fi
        done
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}

#
#
#
#      - name: Deploy to YOLO5 EC2 Instances
#        run: |
#          echo "Deploying to YOLO5 instances..."
#          for IP in ${{ env.EC2_PUBLIC_IP_YOLO5 }}; do
#            ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_PRIVATE_KEY1 }} ubuntu@$IP << EOF
#              docker pull shantalberkhof/my_yolo5:v2
#              docker stop my_yolo5 || true
#              docker rm my_yolo5 || true
#              docker run -d --name my_yolo5 -e BUCKET_NAME=${{ env.BUCKET_NAME }} -e SQS_QUEUE_NAME=${{ env.SQS_QUEUE_NAME }} shantalberkhof/my_yolo5:v2
#            EOF
#          done
#
#          # ????
#          # Take the service down
#          docker compose down
#
#          # Take it up with the current updated values
#          docker compose up -d
#
#  FetchIPs:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the repo code
#        uses: actions/checkout@v2
#
#      - name: Fetch YOLO5 EC2 Public IPs
#        run: |
#          echo "Fetching instance IDs based on tag..."
#          INSTANCE_IDS=$(aws ec2 describe-instances \
#            --filters "Name=tag:${TAG_KEY},Values=${TAG_VALUE}" \
#            --query "Reservations[*].Instances[*].InstanceId" \
#            --output text)
#
#          echo "Fetching public IPs for YOLO5 instances..."
#          EC2_PUBLIC_IP_YOLO5=""
#          for id in $INSTANCE_IDS; do
#            PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $id \
#              --query "Reservations[*].Instances[*].PublicIpAddress" \
#              --output text)
#            EC2_PUBLIC_IP_YOLO5+="$PUBLIC_IP "
#          done
#
#          echo "EC2_PUBLIC_IP_YOLO5=$EC2_PUBLIC_IP_YOLO5" >> $GITHUB_ENV
#          echo "Public IPs: $EC2_PUBLIC_IP_YOLO5"
#
