name: Yolo5 Microservice Deployment
# Make sure to check that the ALB_URL and the queue_url are the same as they were
# docker run -it --name my_yolo5 -e REGION_NAME='us-east-1' -e BUCKET_NAME=tf-shantalberkhof-images-bucket-us-east-1 -e DYNAMODB_TABLE=tf-shantalberkhof-predictions-dynamodb-table -e SQS_QUEUE_NAME=tf-shantalberkhof-project-queue -e ALB_URL=tf-shantalberkhof-polybot-lb-2036714467.us-east-1.elb.amazonaws.com shantalberkhof/my_yolo5:v2
# Deploy the Polybot and the Yolo5 apps in their EC2 instances
on:
  push:
    paths:
      - 'yolo5/**' # depends on paths inside yolo5
    branches:
      - main

env:
  TAG_KEY: Name
  TAG_VALUE: shantalberkhof-yolo5-ec2
  BUCKET_NAME: tf-shantalberkhof-images-bucket-us-east-1
  SQS_QUEUE_NAME: tf-shantalberkhof-project-queue
  EC2_PUBLIC_IP_YOLO5: 44.222.223.214 #needs to be changed each time here

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION2 }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}
        password: ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}


    - name: Build and push Polybot image to DockerHub
      run: |
        cd yolo5
        docker login -u ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }} -p ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}
        IMAGE_NAME=${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}/my_yolo5:v2
        docker build -t $IMAGE_NAME .
        docker push $IMAGE_NAME      

    - name: Fetch YOLO5 EC2 Instance IDs
      # Fetch instance IDs based on the ASG name and include the original EC2 instance
      run: |
        ORIGINAL_INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=ip-address,Values=${{ env.EC2_PUBLIC_IP_YOLO5 }}" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)

        ASG_INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names "tf-shantalberkhof-yolo5-asg" \
          --query "AutoScalingGroups[0].Instances[*].InstanceId" \
          --output text)

        INSTANCE_IDS="$ORIGINAL_INSTANCE_ID $ASG_INSTANCE_IDS"
        echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV
        echo "Combined Instance IDs: $INSTANCE_IDS"

    - name: Fetch YOLO5 EC2 Public IPs
      # Fetch public IPs for YOLO5 instances + original
      run: |
        echo "Fetching public IPs for YOLO5 instances..."
        ALL_EC2_PUBLIC_IPS_YOLO5="${{ env.EC2_PUBLIC_IP_YOLO5 }} "  # Include the original EC2 IP
        for id in $INSTANCE_IDS; do
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $id \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
          ALL_EC2_PUBLIC_IPS_YOLO5+="$PUBLIC_IP "
        done
        echo "ALL_EC2_PUBLIC_IPS_YOLO5=$ALL_EC2_PUBLIC_IPS_YOLO5" >> $GITHUB_ENV 
        echo "All Public IPs: $ALL_EC2_PUBLIC_IPS_YOLO5"
   

    - name: Deploy to YOLO5 EC2 Instances
      # Deploy to YOLO5 EC2 Instances
      run: |
        echo "${{ secrets.US_EAST_1_PRIVATE_KEY }}" > private_key1.pem
        chmod 400 private_key1.pem  

        echo "Deploying all YOLO5 instances ..."
        for id in $INSTANCE_IDS; do   
          echo "Current instance ID: $id"
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $id \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)

          echo "Current instance IP: $PUBLIC_IP"
          if [ "$PUBLIC_IP" == "null" ] || [ -z "$PUBLIC_IP" ]; then
            echo "No public IP found for instance $id"
            continue
          fi
            
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $id --query 'Reservations[0].Instances[0].State.Name' --output text --region ${{ secrets.AWS_REGION2 }})

          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "Instance $id is $INSTANCE_STATE. Starting the instance..."
            aws ec2 start-instances --instance-ids $id --region ${{ secrets.AWS_REGION2 }}
        
            echo "Waiting for instance $id to be in running state..."
            aws ec2 wait instance-running --instance-ids $id --region ${{ secrets.AWS_REGION2 }}
          fi
                    
          # Retry SSH connection up to 5 times with a delay
          for attempt in {1..5}; do
            echo "Attempt $attempt to connect to $PUBLIC_IP"
            if ssh -o StrictHostKeyChecking=no -i private_key1.pem ubuntu@$PUBLIC_IP "echo 'SSH connection successful'"; then
        
              ssh -o StrictHostKeyChecking=no -i private_key1.pem ubuntu@$PUBLIC_IP "sudo docker stop my_yolo5 || true"
              ssh -o StrictHostKeyChecking=no -i private_key1.pem ubuntu@$PUBLIC_IP "sudo docker rm my_yolo5 || true"
        
              ssh -o StrictHostKeyChecking=no -i private_key1.pem ubuntu@$PUBLIC_IP "sudo docker pull shantalberkhof/my_yolo5:v2"
              ssh -o StrictHostKeyChecking=no -i private_key1.pem ubuntu@$PUBLIC_IP "sudo docker run -d --name my_yolo5 -e REGION_NAME='us-east-1' -e BUCKET_NAME=tf-shantalberkhof-images-bucket-us-east-1 -e SQS_QUEUE_NAME=tf-shantalberkhof-project-queue -e DYNAMODB_TABLE='tf-shantalberkhof-predictions-dynamodb-table' -e ALB_URL='https://tf-shantalberkhof-polybot-lb-1994633323.us-east-1.elb.amazonaws.com' shantalberkhof/my_yolo5:v2"
              break
            else
              echo "SSH connection to $PUBLIC_IP failed. Retrying in 10 seconds..."
              sleep 10
            fi
          done
        done
