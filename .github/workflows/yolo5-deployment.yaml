name: Yolo5 Microservice Deployment
# "Instance Refresh" in the ASG settings, which will gradually replace all instances with new ones that pull the latest Docker image.
on:
  push:
    paths:
      - 'yolo5/**'
    branches:
      - main

env:
  TAG_KEY: Name
  TAG_VALUE: shantal-aws-yolo1
  BUCKET_NAME: shantal-awsproject
  SQS_QUEUE_NAME: shantal-queue-aws
  EC2_PUBLIC_IP_YOLO5: 18.188.13.117 #needs to be changed each time here


jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}


    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.SHANTAL_DOCKERHUB_USERNAME }}
        password: ${{ secrets.SHANTAL_DOCKERHUB_PASSWORD }}

    - name: Fetch YOLO5 EC2 Instance IDs
      # Fetch instance IDs based on the ASG name and include the original EC2 instance
      run: |
        ORIGINAL_INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=ip-address,Values=${{ env.EC2_PUBLIC_IP_YOLO5 }}" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)

        ASG_INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names "shantal-asg-aws" \
          --query "AutoScalingGroups[0].Instances[*].InstanceId" \
          --output text)

        INSTANCE_IDS="$ORIGINAL_INSTANCE_ID $ASG_INSTANCE_IDS"
        echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV
        echo "Combined Instance IDs: $INSTANCE_IDS"

      # Fetch instance IDs based on the ASG name
#      run: |
#        INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
#          --auto-scaling-group-names "shantal-asg-aws" \
#          --query "AutoScalingGroups[0].Instances[*].InstanceId" \
#          --output text)
#        echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV
#        echo "Instance IDs: $INSTANCE_IDS"


    - name: Fetch YOLO5 EC2 Public IPs
      # Fetch public IPs for YOLO5 instances + original
      run: |
        echo "Fetching public IPs for YOLO5 instances..."
        ALL_EC2_PUBLIC_IPS_YOLO5="${{ env.EC2_PUBLIC_IP_YOLO5 }} "  # Include the original EC2 IP
        for id in $INSTANCE_IDS; do
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $id \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
          ALL_EC2_PUBLIC_IPS_YOLO5+="$PUBLIC_IP "
        done
        echo "ALL_EC2_PUBLIC_IPS_YOLO5=$ALL_EC2_PUBLIC_IPS_YOLO5" >> $GITHUB_ENV 
        echo "All Public IPs: $ALL_EC2_PUBLIC_IPS_YOLO5"
   

    - name: Deploy to YOLO5 EC2 Instances
      # Deploy to YOLO5 EC2 Instances
      run: |
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY1 }}" > private_key1.pem
        chmod 400 private_key1.pem  

        echo "Deploying all YOLO5 instances ..."
        for id in $INSTANCE_IDS; do   
        
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $id \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
          
          if [ "$PUBLIC_IP" == "null" ] || [ -z "$PUBLIC_IP" ]; then
            echo "No public IP found for instance $id"
            continue
          fi
            
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $id--query 'Reservations[0].Instances[0].State.Name' --output text --region ${{ secrets.AWS_REGION }}) 
          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "Instance $id is $INSTANCE_STATE. Starting the instance..."
            aws ec2 start-instances --instance-ids $id --region ${{ secrets.AWS_REGION }}
        
            echo "Waiting for instance $id to be in running state..."
            aws ec2 wait instance-running --instance-ids $id --region ${{ secrets.AWS_REGION }}
          fi
                    
          # Retry SSH connection up to 5 times with a delay
          for attempt in {1..5}; do
            echo "Attempt $attempt to connect to $PUBLIC_IP"
            if ssh -o StrictHostKeyChecking=no -i private_key1.pem ubuntu@$PUBLIC_IP "echo 'SSH connection successful'"; then
        
              ssh -o StrictHostKeyChecking=no -i private_key1.pem ubuntu@$PUBLIC_IP "sudo docker stop my_yolo5 || true"
              ssh -o StrictHostKeyChecking=no -i private_key1.pem ubuntu@$PUBLIC_IP "sudo docker rm my_yolo5 || true"
        
              ssh -o StrictHostKeyChecking=no -i private_key1.pem ubuntu@$PUBLIC_IP "sudo docker pull shantalberkhof/my_yolo5:v2"
              ssh -o StrictHostKeyChecking=no -i private_key1.pem ubuntu@$PUBLIC_IP "sudo docker run -d --name my_yolo5 -e BUCKET_NAME=${{ env.BUCKET_NAME }} -e SQS_QUEUE_NAME=${{ env.SQS_QUEUE_NAME }} shantalberkhof/my_yolo5:v2"
              break
            else
              echo "SSH connection to $id failed. Retrying in 10 seconds..."
              sleep 10
            fi
          done
        done
